apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

allprojects  {
  group = 'com.project'
  version = '1.0'
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'jacoco'
  
  def coverageSourceDirs = [
    'src/main/java'
  ]

  jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories =  files(sourceSets.main.output)
        
    reports {
        csv.enabled false
        html{
          enabled true
          destination "${buildDir}/reports/jacoco"
        }
        xml.enabled false
     }
  }
  
  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://plugins.gradle.org/m2' }
  }
  
  test {
    useTestNG()
 }
 
 test.finalizedBy(project.tasks.jacocoTestReport)
}

buildscript {
  repositories {
  	mavenLocal()
    maven { url 'https://plugins.gradle.org/m2' }
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
  }
}

task testReport(type: TestReport, group: 'Build') {
  description = 'Generates an aggregate test report'
  destinationDir = file("${buildDir}/reports/allTests")
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
  description = 'Generates an aggregate report from all subprojects'
  dependsOn = subprojects.test

  additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories = files(subprojects.sourceSets.main.output)
  executionData = files(subprojects.jacocoTestReport.executionData)

  reports {
    html.enabled = true
    xml.enabled = true
  }

  doFirst {
    executionData = files(executionData.findAll { it.exists() })
  }
}

coveralls {
  sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
  group = 'Coverage reports'
  description = 'Uploads the aggregated coverage report to Coveralls'

  dependsOn jacocoRootReport
  onlyIf { System.env.'CI' }
}